{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "JS notes",
  "steps": [
    {
      "file": "firstjs.js",
      "description": "console.log (\"text\"); this is used to print a message.",
      "line": 1
    },
    {
      "file": "firstjs.js",
      "description": "alert(\"text\"); this is used for popups on websites.",
      "line": 2
    },
    {
      "file": "firstjs.js",
      "description": "fullName is a key and MX is a value. Note \r\n🐪 Naming Conventions\r\nStyle\t    Example\t  Valid in JS?\t   Notes\r\ncamelCase\tfullName\t✅ Yes\t  ✅ Common for variables & functions\r\nPascalCase\tFullName\t✅ Yes\t  ✅ Used for classes/constructors\r\nsnake_case\tfull_name\t✅ Yes\t  Rare in JS, but valid\r\nkebab-case\tfull-name\t❌ No\t  ❌ Not allowed in variables\r\nlowercase\tfullname\t✅ Yes\t  Valid but less readable",
      "line": 3
    },
    {
      "file": "firstjs.js",
      "description": "Let - a Variable that cannot be re-declared but can be updated. (A block scope variable)",
      "line": 5
    },
    {
      "file": "firstjs.js",
      "description": "added to update the age from 22 to 24 ",
      "line": 7
    },
    {
      "file": "firstjs.js",
      "description": "Adds +1 then shows the Result. In this case If age = 24 then the result shown will be 25",
      "line": 9
    },
    {
      "file": "firstjs.js",
      "description": "const - a Variable that cannot be re-declared or updated. (A block scope variable) Values must be assigned or will show error.",
      "line": 10
    },
    {
      "file": "firstjs.js",
      "description": "var - a Variable that can be re-declared & updated. (A global scope variable) This variable is outdated and not recommended to use in code it causes confusion.",
      "line": 12
    },
    {
      "file": "firstjs.js",
      "description": "Use {} to assign a block. Inside a block let or const cannot be applied twice",
      "line": 15
    },
    {
      "file": "firstjs.js",
      "description": "\"3\" is a primitive data-type which is called Number. To see a data-type : typeof variablename\r\n(numbers can be both positive & negative.)",
      "line": 23
    },
    {
      "file": "firstjs.js",
      "description": "\"Papon\" is a primitive data-type which is called String. To see a data-type : typeof variablename ",
      "line": 24
    },
    {
      "file": "firstjs.js",
      "description": "\"123\" is a primitive data-type which is called BinIng.(it will print as 123n) To see a data-type : typeof variablename",
      "line": 25
    },
    {
      "file": "firstjs.js",
      "description": "'Symbol (\"Hello\")' is a primitive data-type which is called Symbol.{it will print as Symbol (hello!)} To see a data-type : typeof variablename",
      "line": 26
    },
    {
      "file": "firstjs.js",
      "description": "\"true\" is a primitive data-type which is called Boolean. To see a data-type : typeof variablename",
      "line": 27
    },
    {
      "file": "firstjs.js",
      "description": "here is a primitive data-type which is called Undefined. To see a data-type : typeof variablename(if there is no value added it will be printed as undefined)",
      "line": 28
    },
    {
      "file": "firstjs.js",
      "description": "\"null\" is a primitive data-type which is called Null. To see a data-type : typeof variable name (typeof value will show object but it is a primitive data-type) Null is basically an absence of an object",
      "line": 29
    },
    {
      "file": "firstjs.js",
      "description": "Inside the block There is a collection of data this it's a Non-primitive data-type which is called Object.\r\n(Arrays, Functions are Object)\r\n",
      "line": 30
    },
    {
      "file": "firstjs.js",
      "description": "in const object key is change able ",
      "line": 36
    },
    {
      "file": "firstjs.js",
      "description": "console.log(student.age);\r\nconsole.log(student[\"cgpa\"]);\r\nThese are 2 ways to print values from block.",
      "line": 39
    },
    {
      "file": "firstjs.js",
      "description": "\"abcd\" + 123 = \"abcd123\" \"123\" + 1 = \"1231\" but 123 + 1 = 124",
      "line": 40
    },
    {
      "file": "firstjs.js",
      "description": "This is printing the value of a & b  ",
      "line": 48
    },
    {
      "file": "firstjs.js",
      "description": "If (\"a + b\") it will print  a + b not the sum but if (a + b) it will print sum. So, (\"a + b =\", a + b) will print a + b = sum",
      "line": 49,
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 1,
          "character": 126
        }
      }
    },
    {
      "file": "firstjs.js",
      "description": "Subtraction",
      "line": 50
    },
    {
      "file": "firstjs.js",
      "description": "\"*\" use for multiplication",
      "line": 51
    },
    {
      "file": "firstjs.js",
      "description": "\"/\" Used for division ",
      "line": 52
    },
    {
      "file": "firstjs.js",
      "description": "\"%\" Used for Modulus ",
      "line": 53
    },
    {
      "file": "firstjs.js",
      "description": "\"**\" is used of Exponentiation (a^b)",
      "line": 54
    },
    {
      "file": "firstjs.js",
      "description": "This in Increment. Instead of a+1, a++ is use print value is the same. There are 2 uses of it ++a(preIncrement) & a++ (postIncrement)",
      "line": 64,
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 1,
          "character": 70
        }
      }
    },
    {
      "file": "firstjs.js",
      "description": "This in Decrement. Instead of a-1, a-- is use print value is the same. There are 2 uses of it a-- (post-decrement) & --a (pre-decrement)",
      "line": 65
    },
    {
      "file": "firstjs.js",
      "description": "\"+=\" is (a = a + x) ",
      "line": 75
    },
    {
      "file": "firstjs.js",
      "description": "\"-=\" is (a = a - x)",
      "line": 78
    },
    {
      "file": "firstjs.js",
      "description": "\"*=\" is (a = a * x) { \" * \" is multiplication }",
      "line": 81
    },
    {
      "file": "firstjs.js",
      "description": "\"/=\" is (a = a / x) {\"/\" is division}",
      "line": 84
    },
    {
      "file": "firstjs.js",
      "description": "\"%=\" is (a = a % x) {\"%\"  is modular}",
      "line": 87
    },
    {
      "file": "firstjs.js",
      "description": "\"**=\" is (a = a ^ x) ",
      "line": 90
    },
    {
      "file": "firstjs.js",
      "description": "if there is string value it will still show true (string value get converted to number)",
      "line": 97
    },
    {
      "file": "firstjs.js",
      "description": "Now it will be false cause its not getting converted to number",
      "line": 98
    },
    {
      "file": "firstjs.js",
      "description": "\"==\" (a = b)",
      "line": 100
    },
    {
      "file": "firstjs.js",
      "description": "\"===\" (a = b) true if a = x & b = x false if a = x b = \"x\"  ",
      "line": 101
    },
    {
      "file": "firstjs.js",
      "description": "\"!=\" (a not equal to b) ",
      "line": 102
    },
    {
      "file": "firstjs.js",
      "description": "\"!==\" (a not equal to b) true if a = x & b = x false if a = x & b = \"x\"",
      "line": 103,
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 1,
          "character": 72
        }
      }
    },
    {
      "file": "firstjs.js",
      "description": "\">=\" (a is greater than or equal b) ",
      "line": 104,
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 1,
          "character": 28
        }
      }
    },
    {
      "file": "firstjs.js",
      "description": "\"<=\" (a is less than or equal to b) ",
      "line": 105
    },
    {
      "file": "firstjs.js",
      "description": "\">\" (a is greater than b)",
      "line": 106
    },
    {
      "file": "firstjs.js",
      "description": "\"<\" (a is less than b)",
      "line": 107
    },
    {
      "file": "practice.js",
      "description": "Can see the typeof using this. It prints object.",
      "line": 16,
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 1,
          "character": 49
        }
      }
    },
    {
      "file": "practice.js",
      "description": "Can see the typeof using this. It prints string.",
      "line": 17
    },
    {
      "file": "logicalop.js",
      "description": "This isn't recommended always use blocks!!",
      "line": 80
    },
    {
      "file": "logicalop.js",
      "description": "Different version of if else.If only used for strings then okay else not recommended to use.",
      "line": 87
    }
  ],
  "ref": "main"
}